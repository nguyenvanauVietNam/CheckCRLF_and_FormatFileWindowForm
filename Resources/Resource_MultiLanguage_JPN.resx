<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_CheckUpdate" xml:space="preserve">
    <value>更新を確認</value>
    <comment>Check update</comment>
  </data>
  <data name="Button_check_CRLF" xml:space="preserve">
    <value>CRLFの確認</value>
    <comment>Check CRLF</comment>
  </data>
  <data name="Button_Check_Encoding" xml:space="preserve">
    <value>エンコーディングの確認を開始</value>
    <comment>Start check encoding</comment>
  </data>
  <data name="Button_Exit" xml:space="preserve">
    <value>終了</value>
    <comment>Exit</comment>
  </data>
  <data name="Button_OpenFile_CheckCRLF" xml:space="preserve">
    <value>ファイルを開く</value>
    <comment>Open File</comment>
  </data>
  <data name="Button_OpenFile_Check_Encoding" xml:space="preserve">
    <value>ファイルを開く</value>
    <comment>Open File</comment>
  </data>
  <data name="Button_Open_Log" xml:space="preserve">
    <value>ログフォルダを開く</value>
    <comment>Open Log Folder</comment>
  </data>
  <data name="Combobox_Encoding" xml:space="preserve">
    <value>エンコーディングを選択</value>
    <comment>Choose Encoding</comment>
  </data>
  <data name="Group_CheckCRLF" xml:space="preserve">
    <value>CRLF機能を確認</value>
    <comment>Check CRLF Function</comment>
  </data>
  <data name="Group_CheckEnCoding" xml:space="preserve">
    <value>エンコーディング機能を確認</value>
    <comment>Check Encoding Function</comment>
  </data>
  <data name="Label_Browser" xml:space="preserve">
    <value>Browser</value>
  </data>
  <data name="label_Extendstion" xml:space="preserve">
    <value>形式を拡張</value>
    <comment>Format extends</comment>
  </data>
  <data name="Lang_label" xml:space="preserve">
    <value>言語</value>
    <comment>Language</comment>
  </data>
  <data name="Tooltips_buttoncheck_CRLF" xml:space="preserve">
    <value>CRLFを確認する必要があるフォルダを選択して、確認をクリック</value>
    <comment>Select the folder needs to be checked CRLF and click to check</comment>
  </data>
  <data name="Tooltips_buttonCheck_Encoding" xml:space="preserve">
    <value>エンコーディングを確認する必要があるフォルダを選択して、確認をクリック</value>
    <comment>Select the folder needs to be checked Encoding and click to check</comment>
  </data>
  <data name="Tooltips_buttonExit" xml:space="preserve">
    <value>ここをクリックしてアプリケーションを終了</value>
    <comment>Click here exit application</comment>
  </data>
  <data name="Tooltips_buttonOpenFile_CheckCRLF" xml:space="preserve">
    <value>CRLFを確認するファイルを選択</value>
    <comment>Select a file to check CRLF</comment>
  </data>
  <data name="Tooltips_buttonOpenFile_Check_Encoding" xml:space="preserve">
    <value>エンコーディングを確認するファイルを選択</value>
    <comment>Select a file to check encoding</comment>
  </data>
  <data name="Tooltips_buttonOpen_Log" xml:space="preserve">
    <value>ログファイルを含むフォルダを開くにはクリック</value>
    <comment>Click to open the folder containing the logs file</comment>
  </data>
  <data name="Tooltips_Button_Check_Update" xml:space="preserve">
    <value>最新バージョンを確認</value>
    <comment>Check latest version</comment>
  </data>
  <data name="Tooltips_combobox_Encoding" xml:space="preserve">
    <value />
  </data>
  <data name="Tooltips_Combobox_Encondig" xml:space="preserve">
    <value>エンコーディングを確認する形式を選択 \r\n注意: 選択したエンコーディング形式に整ったファイル全体が変換されます。</value>
    <comment>Select the format to check Encoding \r\n
Note: The entire file will be converted to the selected encoding format</comment>
  </data>
  <data name="Tooltips_combobox_Lang" xml:space="preserve">
    <value>アプリケーション内で表示する言語を選択</value>
    <comment>Choose language display in Application</comment>
  </data>
  <data name="Tooltips_group_CheckCRLF" xml:space="preserve">
    <value />
  </data>
  <data name="Tooltips_group_CheckEnCoding" xml:space="preserve">
    <value />
  </data>
  <data name="Tooltips_Progressbar" xml:space="preserve">
    <value />
  </data>
  <data name="Tooltips_TextBoxPath" xml:space="preserve">
    <value />
  </data>
  <data name="Tooltips_TextBox_OutPut" xml:space="preserve">
    <value />
  </data>
  <data name="Tooltips_treeView" xml:space="preserve">
    <value />
  </data>
  <data name="TreeView" xml:space="preserve">
    <value>Browser</value>
  </data>
  <data name="Version_label" xml:space="preserve">
    <value>バージョン:</value>
    <comment>Version :</comment>
  </data>
</root>