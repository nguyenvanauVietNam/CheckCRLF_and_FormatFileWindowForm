<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD//6oD5u7FPuXsx2/m7Md95uvIXerqzBkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA5u3HSuvw0eLn7sn/5u3H/+btx//m7cf/5ezH/OXtx6Dk8ckTAAAAAP//
        /wHl68Uo4+7HLtT/1AYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////Efb57LDw9N7+8fXg//L14f/y9uL/8PTe/+btx//m7cf/5u3H/+bt
        xtnm7cdJ5uzG0ebtx//m7cf/5e3H6eXuxlsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADl7cY75+3L/Ojuy//t8tf/7/Pb/+fuyv/n7sn/5u3H/+bt
        x//m7cf/5u3H/7vCrf+oraH/rbSm/9beyf+oraH/p62h/oWIjKJ7gIeVbXF+eUZGVRIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOXtxr3m7cf/5u3H/+btx//p787/5+3J/+bt
        x//m7cf/5u3H/+btx/+ssqj/2eTn/+/8/f/v/P3/7/z9/+/8/f/v/P3/7/z9/+/8/f/r+Pn/m6Sq77Ky
        pRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADm8sIV5ezG/ebtx//m7cf/xsyw/4WF
        gv+oqpv/5u3H/+btx//m7cf/5u3H/6uyr//v/P3/7fr8/+/8/f/v/P3/7/z9/+/8/f/v/P3/0t3i/9Xh
        5f/Ays//yM+zpQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOTtxTrm7cf/5u3H/+bt
        x/95dHb/tZ2O/5aFf/+Ulo3/5u3H/+btx//m7cf/x821/6Orrv/Q2+D/7/z9/+/8/f/v/P3/4+/x/8TP
        1f/g7O//sbu9/6qxqP/m7cb1//+/BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOjwyiLm7cae5e3G1ubt
        x//m7cf/5u3H/3p1d/+2no//tp6P/5eHgf+Ulo3/5u3H/+btx//m7cf/u8Gv/9Tg4//q9/n/0Nzg/+/8
        /f/a5ur/nqar/6uys//M0rf/5u3H/+btx//l8swUAAAAAAAAAAAAAAAAAAAAAAAAAADm68U15e3H8+bt
        x//m7cf/5u3H/+btx//m7cf/u7+o/4N5eP+2no//tp6P/5eHgf+Ulo3/5u3H/+btx//m7cf/ub+t/6qx
        p/+co6H/6PX3/9nm6f+wtqr/5u3H/+btx//m7cf/5e3G1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOXt
        xsvm7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/vsOq/3pxdP+ciYL/tp6P/5eHgP+Rkov/5u3H/+bt
        x//m7cf/5u3H/+HnxP+utKj/t76s/+btx//m7cf/5u3H/+Xsx/zm7sY/AAAAAAAAAAAAAAAAAAAAAAAA
        AADr68QN5ezG/ebtx//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/vsOq/3pxdf+dioP/tp6P/5iI
        gf+Rkov/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3H/+XrxSgAAAAAAAAAAAAA
        AAAAAAAAAAAAANr/tgfl7Mf75u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/ur6o/3py
        dP+dioP/tp6P/5eHgP96enr/iYeD/4iIg/+/xKz/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5e3HZQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAObtxrHm7cf/5u3H/9vhv//a4L//4OjF/+Tryf/h6cb/2uK//+bt
        x//m7cf/ur6o/310dP+mkof/tp6P/7aej/+2no//mYeA/31ydP+bnZH/5u3H/+btx//m7cf/5u3H/+bt
        x//l7MZsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5O3KHdzjwNiZoKT/usLH/7rCx//Q3N7/1eDk/9Pc
        4P+5wsb/nKOl/+Prxv/m7cf/ur6o/4B3d/+2no//tp6P/7aej/+0nY7/sZqN/351dP/Hy7H/5u3H/+bt
        x//m7cf/5u3H/+frx0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVnKrvGzfnv/P3/7/z9/+/8
        /f/v/P3/7/z9/+Pv8f+zvML/3uXB/+btx//m7cf/fXZ3/7aej/+2no//gXl5/4uMhv+Fenr/q5SJ/46P
        iP/m7cf/5u3H/+btx//l7MfS////AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbHSDZaKq
        rvvN19z/7/z9/+/8/f/v/P3/wMzR/6qwov/m7cf/5u3H/+btx/99dXf/tp6P/5KEfv+4vKf/5u3H/7e8
        p/+DeXj/hISC/+btx//m7cf/5uzH7ejuxi0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA1eC/fJ+loP/o9ff/vMbK/6ivrf+mraj/5ezG/+btx//m7cf/5u3H/399fP+2no//oo+G/5CQ
        if/m7cf/5u3H/7e8p/+2uaX/5u3H/+Xsx7Po8MoiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8C3uXCl660qP/Ey7P/5u3H/+btx//m7cf/5u3H/+btx//m7cf/xcux/310
        df+1nY7/mYiD/5GTi//m7cf/5u3H/+btx//m7cf/5uvFNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5e7HPOXsxpXm7caw5u3Gkebsxuvm7cf/5u3H/+bt
        x//m7cf/yM2z/4F/fv99d3j/ZmNs/8nPs//m7cf/5u3H/+bsxvns7MgOAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5u3Gkebt
        x//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3H/+btx//m7cf/5u3HrwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADp6ckY5uzG7Ofuyf/p783/7PHV/+juy//o7sv/5+3I/+btx//m7cf/5u3H/+btx/fn7ckrAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD29up88vXj+fL14f/x9eD/8/fl/+3y1v/p787/5u3H/+btx//m7Mb55+3GVgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADn7ckr5+7Lxu3y1v/q8M//5u3H/+btx//m7cf/5uzHz+Xt
        xjsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6O7GLefrxWvm7MZ+5ezGbebr
        yTT///8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////A////gCH//gAA//4AAA/+AAAH/AAAB/wA
        AAPwAAAD4AAAB+AAAAfAAAAHwAAAB+AAAAfgAAAH8AAAB/gAAA/8AAAf/AAAP/8AAD//8AB///AAf//4
        AP///AH///8D//////////////////////8=
</value>
  </data>
</root>